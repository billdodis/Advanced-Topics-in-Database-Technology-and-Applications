<html>
    <head>
        <title>Timeline</title>
    </head>
    <style>
        input[type=submit] {
          width: 100%;
          background-color: #000000;
          color: white;
          padding: 14px 20px;
          margin: 8px 0;
          border: none;
          border-radius: 4px;
          cursor: pointer;
        }
        .axis--x path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
        }
    </style>
    <body>
        <h1>Timeline</h1>
        <svg width="960" height="500"></svg>
        <script src="https://d3js.org/d3.v4.min.js"></script>
        <div id="my_dataviz"></div>
        <form action="/timeline" method="POST">
            <input class="subbutton" type="submit"value="Return to main page">
        <script>var datarray = "<%= locals.x %>";</script>
        <script>var strarray = "<%= locals.strings %>";</script>
        <script>var fyr = "<%= locals.fyeaar %>";
        var syr = "<%= locals.syeaar %>";
        var shyr = "<%= locals.showyeaar %>";</script>
            <script>
                x = datarray.split(',');
                strarray = strarray.split(',');
                
                for(var i=0;i<strarray.length; i++){
                    strarray[i] = strarray[i].replace('&#34;', '');
                    strarray[i] = strarray[i].replace('&#34;', '');
                }
                var stringarray=[];
                var count = 2;
                //console.log('strarr', strarray);
                var countries = 2;
                var comparisons = 2;
                var changed = 0;
                var flagforlegends = 0;
                for(var i=0;i<strarray.length; i++){
                    if(strarray[i]=="---" || strarray[i]==" --"){
                        strarray.splice(i, 1);
                        if((i==0 || i==1) && changed == 0){
                            if(i==0){
                                flagforlegends =1;
                            }
                            changed = 1;
                            countries = 1;
                            comparisons = 2;
                            i--;
                        }
                        else{
                            comparisons = 1;
                            i--;
                        }
                    }
                }
                for(var i=0;i<strarray.length/2;i++){
                    var str = '';
                    if(comparisons==2 && countries==2){
                        str+=strarray[i]+'s'+strarray[i+count];
                        stringarray.push(str);
                        str = '';
                        str+=strarray[i]+'s'+strarray[i+count+1];
                        stringarray.push(str);
                        count = count-1;
                    }
                    else if(comparisons==2 && countries==1){
                        str+=strarray[i]+'s'+strarray[i+1];
                        stringarray.push(str);
                        str = '';
                        str+=strarray[i]+'s'+strarray[i+1+1];
                        stringarray.push(str);
                        i++;
                    }
                    else if(comparisons==1 && countries==2){
                        str+=strarray[i]+'s'+strarray[i+2];
                        stringarray.push(str);
                        str = '';
                        str+=strarray[i+1]+'s'+strarray[i+1+1];
                        stringarray.push(str);
                        i++;
                    }
                    else{
                        str+=strarray[i]+'s'+strarray[i+1];
                        stringarray.push(str);
                    }
                    
                }
                //console.log('array',stringarray);
                //console.log('syr', syr);
                //console.log('fyr', fyr);
                //console.log('showyr', shyr);
                fyr = parseInt(fyr);
                var yearr = fyr;
                var data=[];
                //console.log(x);
                var sum = comparisons*countries;
                for(var i =0; i<x.length;i=i+sum){
                    for(var xx=0;xx<sum;xx++){
                        if(x[i+xx]==undefined){
                        x[i+xx]=0;
                        }
                    }
                    //console.log('sum',sum);
                    if(sum==1){
                        let y = {"year":fyr,"a":parseFloat(x[i])}
                        fyr = fyr+1;
                        data.push(y);
                    }
                    else if(sum==2){
                        let y = {"year":fyr,"a":parseFloat(x[i]),"b":parseFloat(x[i+1])}
                        fyr = fyr+1;
                        data.push(y);
                    }
                    else{
                        let y = {"year":fyr,"a":parseFloat(x[i]),"b":parseFloat(x[i+1]),"c": parseFloat(x[i+2]),"d": parseFloat(x[i+3])}
                        fyr = fyr+1;
                        data.push(y);
                    }
                    //console.log('y',y);  
                }
                if(sum==1){
                    var columns=["year","a"];
                }
                else if(sum==2){
                    var columns=["year","a","b"];
                }
                else{
                    var columns=["year","a","b","c","d"];
                }
                //console.log(data);
                //console.log('x',x);
                //console.log(data[data.length -1]);
                // set the dimensions and margins of the graph
                var svg = d3.select("svg"),
                    margin = {top: 20, right: 80, bottom: 30, left: 50},
                    width = svg.attr("width") - margin.left - margin.right,
                    height = svg.attr("height") - margin.top - margin.bottom,
                    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                var x = d3.scaleLinear().range([0, width]),
                    y = d3.scaleLinear().range([height, 0]),
                    z = d3.scaleOrdinal(d3.schemeCategory10);
                var counter = 1;
                var line = d3.line()
                    .curve(d3.curveBasis)
                    .x(function(d) { if(fyr>syr){fyr=yearr;}fyr=fyr+1;return x(fyr-1); })
                    .y(function(d) { return y(d.temperature); });
                        fyr = yearr;
                        var cities = columns.slice(1).map(function(id) {
                            return {
                            id: id,
                            values: data.map(function(d) {
                                if(fyr>syr){fyr=yearr;}fyr=fyr+1;return{date: fyr-1, temperature: d[id]};
                            })
                            };
                        });
                        fyr = yearr;
                        x.domain(d3.extent(data, function(d) {if(fyr>syr){fyr=yearr;}fyr=fyr+1; return fyr-1; }));

                        y.domain([
                            d3.min(cities, function(c) { return d3.min(c.values, function(d) { return d.temperature; }); }),
                            d3.max(cities, function(c) { return d3.max(c.values, function(d) { return d.temperature; }); })
                        ]);

                        z.domain(cities.map(function(c) { return c.id; }));

                        g.append("g")
                            .attr("class", "axis axis--x")
                            .attr("transform", "translate(0," + height + ")")
                            .call(d3.axisBottom(x));

                        g.append("g")
                            .attr("class", "axis axis--y")
                            .call(d3.axisLeft(y))
                            .append("text")
                            .attr("transform", "rotate(-90)")
                            .attr("y", 6)
                            .attr("dy", "0.71em")
                            .attr("fill", "#000");
                            //.text("Values");

                        var city = g.selectAll(".city")
                            .data(cities)
                            .enter().append("g")
                            .attr("class", "city");

                        city.append("path")
                            .attr("class", "line")
                            .attr("d", function(d) { return line(d.values); })
                            .style("stroke", function(d) { return z(d.id); });

                        city.append("text")
                            .datum(function(d) { return {id: d.id, value: d.values[d.values.length - 1]}; })
                            .attr("transform", function(d) { return "translate(" + tsime(x(d.value.date)) + "," + tsime(y(d.value.temperature)) + ")"; })
                            .attr("x", 3)
                            .attr("dy", "0.35em")
                            .style("font", "10px sans-serif")
                            .text(function(d) { return d.id; });
                        function tsime(x){
                            //console.log(x);
                            //console.log(typeof(x));
                            if(isNaN(x)){
                                return 0;
                            }
                            return x;
                        }
                        svg.append("text")
                            .attr("class", "x label")
                            .attr("text-anchor", "end")
                            .attr("x", width+90)
                            .attr("y", height +50)
                            .text("Years");

                        svg.append("text")
                            .attr("class", "y label")
                            .attr("text-anchor", "end")
                            .attr("x", -15)
                            .attr("y", 6)
                            .attr("dy", ".75em")
                            .attr("transform", "rotate(-90)")
                            .text("Values");
                    if(sum==1){
                        svg.append("circle").attr("cx",width/2 +150).attr("cy",9).attr("r", 4).style("fill", "blue")
                        svg.append("text").attr("x", width/2 +160).attr("y", 9).text('a:'+stringarray[0]).style("font-size", "13px").attr("alignment-baseline","middle")                       
                    }
                    else if(sum==2){
                        svg.append("circle").attr("cx",width/2 +150).attr("cy",9).attr("r", 4).style("fill", "blue")
                        svg.append("circle").attr("cx",width/2 +150).attr("cy",39).attr("r", 4).style("fill", "orange")
                        if(flagforlegends==1 ||(countries==2 && comparisons ==1)){
                            var firststring = stringarray[0];
                            var secondstring = stringarray[1];
                        }
                        else{
                            var firststring = stringarray[1];
                            var secondstring = stringarray[0];
                        }
                        svg.append("text").attr("x", width/2 +160).attr("y", 9).text('a: '+firststring).style("font-size", "13px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", width/2 +160).attr("y", 39).text('b: '+secondstring).style("font-size", "13px").attr("alignment-baseline","middle")
                    }
                    else{
                        svg.append("circle").attr("cx",width/2 +150).attr("cy",9).attr("r", 4).style("fill", "blue")
                        svg.append("circle").attr("cx",width/2 +150).attr("cy",39).attr("r", 4).style("fill", "orange")
                        svg.append("circle").attr("cx",width/2 +150).attr("cy",69).attr("r", 4).style("fill", "green")
                        svg.append("circle").attr("cx",width/2 +150).attr("cy",99).attr("r", 4).style("fill", "red")
                        svg.append("text").attr("x", width/2 +160).attr("y", 99).text('d: '+stringarray[3]).style("font-size", "13px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", width/2 +160).attr("y", 69).text('c: '+stringarray[2]).style("font-size", "13px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", width/2 +160).attr("y", 9).text('a: '+stringarray[1]).style("font-size", "13px").attr("alignment-baseline","middle")
                        svg.append("text").attr("x", width/2 +160).attr("y", 39).text('b: '+stringarray[0]).style("font-size", "13px").attr("alignment-baseline","middle")
                    }
            </script>
    </body>
</html>